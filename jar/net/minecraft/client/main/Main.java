package net.minecraft.client.main;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.mojang.authlib.properties.PropertyMap;
import io.netty.util.ResourceLeakDetector;
import io.netty.util.ResourceLeakDetector.Level;
import io.netty.util.concurrent.FastThreadLocalThread;
import java.io.File;
import javax.net.ssl.HttpsURLConnection;
import javax.net.ssl.SSLSocketFactory;

public class Main {
   private static void a() {
      dev.xdark.protect4j.VM.execute(new Object[6], new Object[6], new byte[]{-69, 41, -69, 28, -4, -33, -75, 94, -108, 112, 45, 100, 0, 0, 0, 0, -26, -65, -88, -28, 0, 0, 0, 12, 106, 97, 118, 97, 46, 110, 101, 116, 46, 85, 82, 76, 3, -65, 101, 90, 103, 114, 49, -110, 0, 0, 0, 0, 42, 126, 32, -113, 0, 0, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 84, 104, 114, 101, 97, 100, -108, 112, 45, 100, 0, 0, 0, 1, 70, -80, 12, -41, -71, 9, 63, -73, 103, 114, 49, -110, 0, 0, 0, 1, -91, 89, -126, 66, 0, 0, 0, 1, 42, 126, 32, -113, 0, 0, 0, 21, 115, 101, 116, 67, 111, 110, 116, 101, 120, 116, 67, 108, 97, 115, 115, 76, 111, 97, 100, 101, 114, -108, 112, 45, 100, 0, 0, 0, 1, -26, -65, -88, -28, 0, 0, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 108, 97, 115, 115, -4, -33, -75, 94, -108, 112, 45, 100, 0, 0, 0, 0, 42, 126, 32, -113, 0, 0, 0, 21, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 108, 97, 115, 115, 76, 111, 97, 100, 101, 114, 96, -119, -110, -45, -17, -48, -12, -109, 46, -57, -115, 6, 103, 114, 49, -110, 0, 0, 0, 2, -108, 112, 45, 100, 0, 0, 0, 1, -26, -65, -88, -28, 0, 0, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 79, 98, 106, 101, 99, 116, -4, -33, -75, 94, -108, 112, 45, 100, 0, 0, 0, 0, -91, 89, -126, 66, 0, 0, 0, 0, -17, -48, -12, -109, 103, 114, 49, -110, 0, 0, 0, 3, 42, 126, 32, -113, 0, 0, 0, 13, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 77, 97, 112, -108, 112, 45, 100, 0, 0, 0, 1, 70, -80, 12, -41, -71, 9, 63, -73, 42, 126, 32, -113, 0, 0, 0, 6, 107, 101, 121, 83, 101, 116, -108, 112, 45, 100, 0, 0, 0, 0, -26, -65, -88, -28, 0, 0, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 108, 97, 115, 115, 46, -57, -115, 6, -91, 89, -126, 66, 0, 0, 0, 1, 42, 126, 32, -113, 0, 0, 0, 17, 103, 101, 116, 65, 108, 108, 83, 116, 97, 99, 107, 84, 114, 97, 99, 101, 115, -108, 112, 45, 100, 0, 0, 0, 0, -26, -65, -88, -28, 0, 0, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 108, 97, 115, 115, 46, -57, -115, 6, 70, -80, 12, -41, -108, 112, 45, 100, 0, 0, 0, 0, -26, -65, -88, -28, 0, 0, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 79, 98, 106, 101, 99, 116, -3, 94, -100, 88, -108, 112, 45, 100, 0, 0, 0, 0, -26, -65, -88, -28, 0, 0, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 79, 98, 106, 101, 99, 116, -3, 94, -100, 88, 60, -45, 84, -71, 0, 0, 0, 20, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 67, 111, 108, 108, 101, 99, 116, 105, 111, 110, -85, -60, 54, -48, 103, 114, 49, -110, 0, 0, 0, 4, -91, 89, -126, 66, 0, 0, 0, 4, -37, 30, -41, -49, 35, -34, 102, -47, 0, 0, 2, -101, -91, 89, -126, 66, 0, 0, 0, 4, 69, -25, 101, -40, 60, -45, 84, -71, 0, 0, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 84, 104, 114, 101, 97, 100, 103, 114, 49, -110, 0, 0, 0, 5, -91, 89, -126, 66, 0, 0, 0, 2, -91, 89, -126, 66, 0, 0, 0, 5, -91, 89, -126, 66, 0, 0, 0, 3, -3, 94, -100, 88, -47, 56, -24, 67, 0, 0, 0, 1, -70, 77, 107, -29, 0, 0, 2, 47, 34, 125, -112, -71, 103, 114, 49, -110, 0, 0, 0, 4, 42, 126, 32, -113, 0, 0, 0, 21, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 108, 97, 115, 115, 76, 111, 97, 100, 101, 114, 96, -119, -110, -45, 42, 126, 32, -113, 0, 0, 0, 3, 115, 99, 108, 78, 85, 79, -84, 103, 114, 49, -110, 0, 0, 0, 5, -91, 89, -126, 66, 0, 0, 0, 4, -91, 89, -126, 66, 0, 0, 0, 4, -91, 89, -126, 66, 0, 0, 0, 5, -88, -55, -64, -38, -91, 89, -126, 66, 0, 0, 0, 4, -91, 89, -126, 66, 0, 0, 0, 5, -107, -21, 73, -69, -91, 89, -126, 66, 0, 0, 0, 0, -95, -55, -2, 35, 42, 126, 32, -113, 0, 0, 0, 17, 115, 117, 110, 46, 109, 105, 115, 99, 46, 76, 97, 117, 110, 99, 104, 101, 114, -108, 112, 45, 100, 0, 0, 0, 1, 70, -80, 12, -41, -71, 9, 63, -73, 103, 114, 49, -110, 0, 0, 0, 1, -91, 89, -126, 66, 0, 0, 0, 1, 42, 126, 32, -113, 0, 0, 0, 6, 108, 111, 97, 100, 101, 114, 78, 85, 79, -84, 103, 114, 49, -110, 0, 0, 0, 5, -91, 89, -126, 66, 0, 0, 0, 4, -91, 89, -126, 66, 0, 0, 0, 1, 42, 126, 32, -113, 0, 0, 0, 11, 103, 101, 116, 76, 97, 117, 110, 99, 104, 101, 114, -108, 112, 45, 100, 0, 0, 0, 0, -26, -65, -88, -28, 0, 0, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 108, 97, 115, 115, 46, -57, -115, 6, 70, -80, 12, -41, -108, 112, 45, 100, 0, 0, 0, 0, -26, -65, -88, -28, 0, 0, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 79, 98, 106, 101, 99, 116, -3, 94, -100, 88, -91, 89, -126, 66, 0, 0, 0, 4, -91, 89, -126, 66, 0, 0, 0, 5, -35, 101, -90, -17, -91, 89, -126, 66, 0, 0, 0, 0, -95, -55, -2, 35, -108, 112, 45, 100, 0, 0, 52, 29, 30, 71, 32, 105, 42, 126, 32, -113, 0, 0, 0, 27, 115, 117, 110, 46, 108, 97, 117, 110, 99, 104, 101, 114, 46, 76, 97, 117, 110, 99, 104, 101, 114, 72, 101, 108, 112, 101, 114, -108, 112, 45, 100, 0, 0, 0, 1, 70, -80, 12, -41, -71, 9, 63, -73, 42, 126, 32, -113, 0, 0, 0, 8, 115, 99, 108, 111, 97, 100, 101, 114, 78, 85, 79, -84, 103, 114, 49, -110, 0, 0, 0, 5, -91, 89, -126, 66, 0, 0, 0, 4, -91, 89, -126, 66, 0, 0, 0, 4, -91, 89, -126, 66, 0, 0, 0, 5, -88, -55, -64, -38, -91, 89, -126, 66, 0, 0, 0, 4, -91, 89, -126, 66, 0, 0, 0, 5, -107, -21, 73, -69, -91, 89, -126, 66, 0, 0, 0, 0, -95, -55, -2, 35, 42, 126, 32, -113, 0, 0, 0, 23, 111, 114, 103, 46, 108, 119, 106, 103, 108, 46, 117, 116, 105, 108, 46, 78, 111, 67, 104, 101, 99, 107, 115, 42, 126, 32, -113, 0, 0, 0, 4, 116, 114, 117, 101, -122, -97, -103, -84, -47, 56, -24, 67, 0, 0, 0, 1, 70, -80, 12, -41, 121, -126, -31, -119, 0});
   }

   private static void b() {
      dev.xdark.protect4j.VM.execute(new Object[2], new Object[0], new byte[]{42, 126, 32, -113, 0, 0, 0, 23, 105, 111, 46, 110, 101, 116, 116, 121, 46, 110, 111, 80, 114, 101, 102, 101, 114, 68, 105, 114, 101, 99, 116, 42, 126, 32, -113, 0, 0, 0, 4, 116, 114, 117, 101, -122, -97, -103, -84, -47, 56, -24, 67, 0, 0, 0, 1, -108, 112, 45, 100, 0, 0, 0, 0, 19, -72, 44, 117, 114, -97, -93, 110, 41, 119, -11, -115, 6, 0, 70, -78, 70, -80, 12, -41, 121, -126, -31, -119, 0});
   }

   public static void main(String[] var0) {
      Thread var10000 = new Thread(new .a());
      var10000.setDaemon(true);
      var10000.start();

      try {
         a();
      } catch (Throwable var30) {
         throw new AssertionError(var30);
      }

      b();
      if (System.getenv("DEBUG") != null) {
         System.setProperty("dev.xdark.feder.netdebug", "true");
      }

      if (System.getProperty("io.netty.leakDetection.level") == null) {
         ResourceLeakDetector.setLevel(Level.DISABLED);
      } else {
         .RR.a("Resource leak detection was overridden to: " + ResourceLeakDetector.getLevel());
      }

      System.setProperty("io.netty.allocator.maxOrder", "9");
      .La.a(() -> {
         .La.a("Bootstrapping", .RR::b);
      });
      .La.a(() -> {
         .La.a("Loading LWJGL", .La::a);
      });
      .La.a(() -> {
         .La.a("IntegerCache population", .acm::a);
      });
      SSLSocketFactory var1 = .wM.a();
      if (var1 != null) {
         HttpsURLConnection.setDefaultSSLSocketFactory(var1);
      }

      .ky var2 = new .ky();
      var2.a();
      var2.a("fullscreen");
      .kj var3 = var2.a("server").a();
      .kj var4 = var2.a("port").a().a(Integer.class).a((int)25565, (Object[])());
      .kj var5 = var2.a("gameDir").a().a(File.class).a((Object)(new File(".")), (Object[])());
      .kj var6 = var2.a("assetsDir").a().a(File.class);
      .kj var7 = var2.a("resourcePackDir").a().a(File.class);
      .kj var8 = var2.a("username").a().a();
      .kj var9 = var2.a("uuid").a().a();
      .kj var10 = var2.a("accessToken").a().a();
      .kj var11 = var2.a("width").a().a(Integer.class).a((int)854, (Object[])());
      .kj var12 = var2.a("height").a().a(Integer.class).a((int)480, (Object[])());
      .kj var13 = var2.a("profileProperties").a().a((Object)"{}", (Object[])());
      .kj var14 = var2.a("assetIndex").a();
      .kC var15 = var2.a(var0);
      int var16 = (Integer)var15.a((.kD)var11);
      int var17 = (Integer)var15.a((.kD)var12);
      boolean var18 = var15.a("fullscreen");
      Gson var19 = (new GsonBuilder()).registerTypeAdapter(PropertyMap.class, new .Le()).create();
      PropertyMap var20 = (PropertyMap).acn.b(var19, (String)var15.a((.kD)var13), PropertyMap.class);
      File var21 = (File)var15.a((.kD)var5);
      File var22 = var15.a((.kD)var6) ? (File)var15.a((.kD)var6) : new File(var21, "assets/");
      File var23 = var15.a((.kD)var7) ? (File)var15.a((.kD)var7) : new File(var21, "resourcepacks/");
      String var24 = var15.a((.kD)var9) ? (String)var9.a(var15) : (String)var8.a(var15);
      String var25 = var15.a((.kD)var14) ? (String)var14.a(var15) : null;
      String var26 = (String)var15.a((.kD)var3);
      Integer var27 = (Integer)var15.a((.kD)var4);
      .acH var28 = new .acH((String)var8.a(var15), var24, (String)var10.a(var15));
      .wO var29 = new .wO(new .wS(var28, var20), new .wP(var16, var17, var18), new .wQ(var21, var23, var22, var25), new .wR(var26, var27));
      (new FastThreadLocalThread(new .wT(var29), "Client thread")).start();
   }

   // $FF: synthetic method
   public static void a(.sE var0) {
      b(var0);
   }

   public static void b(.sE var0) {
      asE.a();
      .a.a = new e(var0.a(), var0.a());
   }
}
